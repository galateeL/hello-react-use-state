import React, {useState} from "react";
import Cards from "./Cards";
import housesToRent from "../data/housesToRent"; //rÃ©cupÃ©ration des donnÃ©es depuis data

function Wrapper() {
    
    //STEP 1 | DÃ©claration d'un state - cela prend la forme d'une constante avec houses (nom de la donnÃ©e que l'on veut manipuler) et setHouses (notre setter = une petite fonction qui met Ã  jour notre donnÃ©e)
    //STEP 2 | En paramÃ¨tre du useState on met la valeur d'initialisation de notre variable "houses". Ici on initialise useState avec nos donnÃ©es complÃ¨tes (notre tableau de donnÃ©es)
    //STEP 3 | Il faut importer {useState} (ligne 1)
    //STEP 4 | On passe au composant Cards (bas de page) houses car nous venons d'initialiser avec housesTorent

    //STEP 5 | Mettre un Ã©couteur d'Ã©vÃ¨nement sur lequel on va appeler une mÃ©thode (ici, "handleAvailability") pour manipuler nos donnÃ©es par la suite. Cette mÃ©thode pour l'instant est juste nommÃ©e mais inconnue
    //STEP 6 | On dÃ©clare uen fonction nommÃ©e "handleAvailability", on lui passe en argument notre Ã©vÃ¨nement. On fait un console.log pour vÃ©rifier le bon cablÃ¢ge (on Ã  connectÃ© le fait de cocher la checkboxet de produire du code en rÃ©ponse Ã  ce clic)
    
    //STEP 7 | Faire un console.log(e) de l'Ã©vÃ¨nement (qui est un simple objet) afin d'accÃ©der Ã  un certain nb d'infos sur l'Ã©vÃ¨nement. Ce qui nous interesse est la clÃ© "target", qui correspond Ã  l'Ã©lÃ©ment sur lequel on clique
    //STEP 8 | Faire un console.log(target) afin de lire des informations sur ce target/ puis sur la value de target par exemple ou encore checked (ce qui nous interesse ici), on remarque alors que checked est soit true soit false en fonction de son Ã©tat
    //STEP 9 | Appliquer une methode filter sur notre tableau de donnÃ©es et l'on souhiate afficher que les maisons available. house.available doit Ãªtre Ã©gal  l'Ã©tat de notre case Ã  cocher (cad e.target.checked)
    //STEP 10 | ContrÃ´ler avec un console.log de notre mÃ©thode. On vient donc de rÃ©cupÃ©rer un nouveau tableau contenant uniquement lensemble des maisons dispo
    //STEP 11 | Mettre Ã  jour la clÃ© "houses" grÃ¢ce au setter afin que notre filtre s'affiche
    
    //STEP 13 | Pour + de faciliter car on va l'utiliser plusieurs fois, on met "e.target.checked" dans une variable.
    //STEP 14 | Mettre une condition car Ã  la dÃ©coche de la case, cela nous renvoie que les false et non l'Ã©tat intial de nos donnÃ©es. On vÃ©rifie donc avec "if" : si notre case est cochÃ©e -> on veut filtrer et si non -> on va rÃ©utiliser notre setter pour rÃ©initialiser l'Ã©tat Ã  l'intÃ©gralitÃ© de notre tableau de donnÃ©es.
    
    const [houses, setHouses] = useState(housesToRent)

    function handleAvailability(e) {
        //console.log ("ok");
        //console.log(e);
        //console.log(e.target);
        //console.log(e.target.value);
        //console.log(e.target.checked)
        //console.log(housesToRent.filter(house => house.available === e.target.checked));
        //setHouses(housesToRent.filter(house => house.available === e.target.checked));

        let checked = e.target.checked;

        if(checked) {
            setHouses(housesToRent.filter(house => house.available === checked))
        }else{
            setHouses(housesToRent)
        }
        
    }


	return (
		<div className="wrapper">
			<div className="filters">
				<input
					type="text"
					className="search-input"
					placeholder="ðŸ”Ž Type to search"
				/>

                <select className="select" name="home">
                    <option value="All">All</option>
                    <option value="Flat">Flat</option>
                    <option value="House">House</option>
                </select>

                <div>
                    <label htmlFor="available">Show only Available</label>
                    <input
                    type="checkbox"
                    className="available-checkbox"
                    name="checkbox"
                    id=""
                    onChange={handleAvailability}
                    />
                </div>

  		    </div>

			<Cards houses={houses} />
		</div>
	);
}

export default Wrapper;
